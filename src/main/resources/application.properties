spring.application.name=ShortLinkSpring

# Thymeleaf
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.content-type=text/html
spring.thymeleaf.cache=false
spring.thymeleaf.enabled=true

# Logging
logging.level.org.springframework.security=DEBUG
#logging.level.org.thymeleaf=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.web.client.RestTemplate=DEBUG

# OAuth2
spring.security.oauth2.client.registration.yandex.client-id=${YANDEX_CLIENT_ID}
spring.security.oauth2.client.registration.yandex.client-secret=${YANDEX_CLIENT_SECRET}
spring.security.oauth2.client.registration.yandex.scope=login:email,login:info
spring.security.oauth2.client.registration.yandex.redirect-uri=https://shortlink.mishazx.ru/login/oauth2/code/yandex
spring.security.oauth2.client.registration.yandex.authorization-grant-type=authorization_code

spring.security.oauth2.client.provider.yandex.authorization-uri=https://oauth.yandex.ru/authorize
spring.security.oauth2.client.provider.yandex.token-uri=https://oauth.yandex.ru/token
spring.security.oauth2.client.provider.yandex.user-info-uri=https://login.yandex.ru/info
spring.security.oauth2.client.provider.yandex.user-name-attribute=id

# Session
server.servlet.session.tracking-modes=cookie
spring.session.store-type=jdbc
spring.session.jdbc.initialize-schema=always
spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-postgresql.sql
spring.session.jdbc.table-name=SPRING_SESSION
spring.session.timeout=30m
spring.session.jdbc.flush-mode=on_save
spring.session.jdbc.cleanup-cron=0 0 4 * * *

# Database Session Properties
spring.session.jdbc.platform=postgresql
spring.session.jdbc.initialize-schema=embedded

# MVC
spring.mvc.pathmatch.matching-strategy=ant_path_matcher

# Server
server.port=8080

# GitHub OAuth2 Configuration
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=user:email
spring.security.oauth2.client.registration.github.redirect-uri=https://shortlink.mishazx.ru/login/oauth2/code/github

spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
spring.security.oauth2.client.provider.github.user-name-attribute=login

# VK OAuth2 configuration
spring.security.oauth2.client.registration.vk.client-id=${VK_CLIENT_ID}
spring.security.oauth2.client.registration.vk.client-secret=${VK_CLIENT_SECRET}
spring.security.oauth2.client.registration.vk.redirect-uri=https://shortlink.mishazx.ru/login/oauth2/code/vk
spring.security.oauth2.client.registration.vk.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.vk.scope=email
spring.security.oauth2.client.registration.vk.client-authentication-method=client_secret_post

# VK Provider Configuration
spring.security.oauth2.client.provider.vk.authorization-uri=https://oauth.vk.com/authorize
spring.security.oauth2.client.provider.vk.token-uri=https://oauth.vk.com/access_token
spring.security.oauth2.client.provider.vk.user-info-uri=https://api.vk.com/method/users.get?v=5.131
spring.security.oauth2.client.provider.vk.user-name-attribute=response
spring.security.oauth2.client.provider.vk.token-name=access_token

# Database
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Flyway
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration
spring.flyway.repair-on-migrate=true

# Session Configuration
spring.session.store-type=jdbc
spring.session.jdbc.initialize-schema=always
spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-postgresql.sql
spring.session.jdbc.table-name=SPRING_SESSION
spring.session.timeout=30m
spring.session.jdbc.cleanup-cron=0 0 4 * * *
spring.session.jdbc.platform=postgresql

# Добавим настройки для сериализации
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
spring.session.jdbc.serializer.class-name=org.springframework.session.jdbc.PostgreSqlJdbcIndexedSessionRepository$PostgreSqlSessionSerializer

# Разрешаем переопределение бинов
spring.main.allow-bean-definition-overriding=true

# Web Resources
spring.web.resources.static-locations=classpath:/static/
spring.mvc.static-path-pattern=/**